import json
import random
import telebot
import traceback
from pygments.lexers import q

smaili = ["üßê","üôÉ","üòÄ","üòÜ","ü§ó","ü§î","ü§Ø"]
bot = telebot.TeleBot("8024613378:AAFS3oC0sWiXhNGo1K5nuH-q37o8vYOzQLk")
shop = {}
mode = "holodilnik"
ER_ID = "-1002668725339"

while True:
    try:
        #holodilnik = {"/iogurti":"üü©", "/konserva":"üü•", "/ris":"üü®"}
        with open('.venv/holodilnik.txt', 'r', encoding='utf-8') as file:
            holodilnik = json.load(file)


        @bot.message_handler(commands=['start'])
        def send_welcome(message):
            bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π Telegram –±–æ—Ç. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
            bot.reply_to(message, "–∫–æ–º–∞–Ω–¥—ã:'/holodilnik','/shop','/start','/new','/smaili'")

        @bot.message_handler(commands=['holodilnik'])
        def send_welcome(message):
            # bot.reply_to(message,"—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫")
            bot.reply_to(message, str(holodilnik))


        @bot.message_handler(commands=['er'])
        def eror(message):
            bot.reply_to(message, str(4/0))

        @bot.message_handler(commands=['smaili'])
        def send_welcome(message):
            bot.reply_to(message, random.choice(smaili))

        # shop
        @bot.message_handler(commands=['shop'])
        def shop_(message):
            global shop
            shop = {}
            for key, v in holodilnik.items():
                if v == "üü®" or v == "üü•":
                    shop[key + "_"] = v
            bot.reply_to(message, str(shop))

        @bot.message_handler(commands=['new'])
        def send_welcome(message):
            global mode
            bot.reply_to(message, "–≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏ –Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–ª–±–∞—Å–∞ kolbasa")
            mode = "new"

        @bot.message_handler(func=lambda message: True)
        def echo_all(message):
            global shop, mode
            # bot.reply_to(message, str(shop))
            # bot.reply_to(message, message.text)
            if message.text in holodilnik:
                if holodilnik[message.text] == "üü®":
                    holodilnik[message.text] = "üü•"
                elif holodilnik[message.text] == "üü©":
                    holodilnik[message.text] = "üü®"
                else:
                    holodilnik[message.text] = "üü©"
                # bot.reply_to(message, "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫")
                bot.reply_to(message, str(holodilnik))
                # bot.reply_to(message, holodilnik[message.text])
            elif message.text in shop:
                holodilnik[message.text[0:-1]] = "üü©"
                shop = {}
                for key, v in holodilnik.items():
                    if v == "üü®" or v == "üü•":
                        shop[key + "_"] = v
                bot.reply_to(message, str(shop))
            else:
                if mode == "holodilnik":
                    bot.reply_to(message, ("–Ω–µ —Ç–æ –≤–≤—ë–ª: "))
                    bot.reply_to(message, message.text)
                else:
                    holodilnik["/" + message.text] = "üü•"
                    mode = "holodilnik"
                    bot.reply_to(message, str(holodilnik))
            with open('.venv/holodilnik.txt', 'w', encoding='utf-8') as file:
                json.dump(holodilnik, file, ensure_ascii=False, indent=4)




        bot.polling()
#bot.reply_to(message, ", ".join(holodilnik))
    except Exception as error:
        print("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$")
        error_type = type(error).__name__  # –¢–∏–ø –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä ZeroDivisionError
        error_message = str(error)  # –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "division by zero"
        error_args = repr(error.args)  # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –æ—à–∏–±–∫–∏
        error_trace = traceback.format_exc()  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –º–µ—Å—Ç–æ–º –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è
        bot.send_message(ER_ID, (error_type + "    " + error_message + "    " + error_args + "    " + error_trace))

